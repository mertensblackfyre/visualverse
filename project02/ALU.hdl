
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // zx logic, i suppose
    Mux16(a=x, b=false, sel=zx , out=x1);

    // nx logic, i suppose
    Not16(in=x1 , out=tmpx);
    Mux16(a=tmpx, b=x1, sel=nx , out=x2);

    // zy logic, i suppose
    Mux16(a=y, b=false, sel=zy , out=y1);
    // ny logic, i suppose
    Not16(in=y1 , out=tmpy);
    Mux16(a=tmpy, b=y1, sel=ny , out=y2);

    // f logic
    And16(a=x1, b=y1 , out=comxy);
    Add16(a =x1, b =y2, out= addxy);
    Mux16(a=comxy, b=addxy, sel=f, out=xy);

    // n logic
    Not16(in=xy , out=negdout );
    Mux16(a=xy, b=negdout, sel=no, out=out1);
    Mux16(a=xy, b=negdout, sel=no, out=out);
    // zr
    Not(in=true, out=tr);
    Not(in=false , out=fr);
    Mux16(a[0]=tr, b[0]=fr , sel=out1[0], out[0]=zr);
    
}
